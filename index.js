// Generated by CoffeeScript 1.8.0
var Schema, UserSchema, Users, app, axis, bodyParser, cookieParser, engine, express, favicon, http, io, logger, mongoose, online_check, path, push_user, routes_index, seat_check, seat_values, server, session, uuid;

express = require('express');

path = require('path');

favicon = require('serve-favicon');

logger = require('morgan');

cookieParser = require('cookie-parser');

bodyParser = require('body-parser');

http = require('http');

engine = require('ect');

mongoose = require('mongoose');

session = require('express-session');

uuid = require('node-uuid');

seat_values = [];

push_user = [];

axis = 1;

app = express();

server = http.createServer(app);

server.listen(3000, '0.0.0.0');

console.log('Server Start. (:3000)');

io = require('socket.io').listen(server);

Schema = mongoose.Schema;

mongoose.connect('mongodb://localhost/db');

UserSchema = require("./models/Users").users;

mongoose.model('Users', UserSchema);

Users = mongoose.model('Users');

Users.remove({}, function(err, data) {
  return Users.find({}, function(err, data) {
    return console.log(data);
  });
});

app.use(logger('dev'));

app.use(session({
  secret: '61b861983bbcffe7199f21823393910e',
  resave: true,
  saveUninitialized: true
}));

app.use(bodyParser.json());

app.use(bodyParser.urlencoded({
  extended: false
}));

app.use(cookieParser());

app.use(express["static"](path.join(__dirname, 'public')));

app.use(express["static"](__dirname + '/public'));

app.set('view engine', 'ect');

app.engine('ect', engine({
  watch: true,
  root: __dirname + '/views',
  ext: '.ect'
}).render);

seat_check = function(req, res, next) {
  var new_user;
  if (req.session.uuid != null) {
    return Users.findOne({
      uuid: req.session.uuid,
      seat: {
        $ne: null
      }
    }, function(err, data) {
      req.session.seat = data.seat;
      return next();
    });
  } else {
    req.session.uuid = uuid.v4();
    new_user = new Users();
    new_user.uuid = req.session.user_id;
    new_user.seat = 0;
    new_user.save(function(err) {
      return Users.find({}, function(err, data) {});
    });
    return res.redirect('/seat_set');
  }
};

online_check = function(req, res, next) {
  return Users.find({}, function(err, data) {
    var m, _i, _len;
    req.session.online_seats = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      m = data[_i];
      req.session.online_seats.push(m.seat);
    }
    return next();
  });
};

routes_index = require('./routes/index');

app.get('/', seat_check, routes_index.root);

app.get('/monitor', online_check, routes_index.monitor);

app.get('/seat_set', routes_index.seat_set);

io.on('connection', function(socket) {
  socket.on('rank_gather', function(data) {
    var i, _i, _ref;
    for (i = _i = 1, _ref = data.rank.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
      if (data.rank[i] !== null) {
        if (seat_values[i] == null) {
          seat_values[i] = {
            x: 0.0,
            y: 0.0
          };
        }
        if (push_user[i] == null) {
          push_user[i] = 0;
        }
        seat_values[i].x = parseFloat(seat_values[i].x) + parseFloat(data.rank[i].x);
        seat_values[i].y = parseFloat(seat_values[i].y) + parseFloat(data.rank[i].y);
        push_user[i] += 1;
      }
    }
    console.log(seat_values);
    console.log(push_user);
    socket.broadcast.emit('mod_axis', {
      rank: seat_values,
      uc: push_user
    });
  });
  socket.on('seat_set', function(data) {
    var new_user, seat;
    new_user = new Users();
    new_user.uuid = data.uuid;
    new_user.seat = data.seat;
    seat = data.seat;
    new_user.save(function(err) {
      return Users.find({}, function(err, data) {
        socket.emit('goto_table', {});
        return socket.broadcast.emit('online_push', {
          seat: seat
        });
      });
    });
  });
  socket.on('push_finish', function(data) {
    socket.broadcast.emit('push_finish', {
      rank: seat_values,
      uc: push_user,
      axis: axis
    });
  });
  socket.on('axis_change', function(data) {
    axis = data.axis;
    socket.broadcast.emit('axis_change', {
      axis: data.axis
    });
  });
});
